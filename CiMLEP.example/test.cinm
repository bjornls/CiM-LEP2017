FuncBlock(add,  (40,32), 180, 125, ((0,0), 90, 1)((0,32), 270, 0), ((40,0), 90, 0));
FuncBlock(mul, (120,160), 803, 4407, ((0,0), 0, 0)((32,160), 180, 0), ((120,64), 90, 0));

component main<in[8] | out[4]>(){
	 int n = 2;
	 in[0:2*n^2] => matrix_mult(n) => out[0:n^2];
}


//matrix multiplication for nxn matrix
component matrix_mult<A[n^2], B[n^2] | out[n^2]>(int n){
	int i = 0;
	loop<++>(i=0:n^2; A[i/n*n:i/n*n+n] ++ B[i%n:n:i%n+n^2]) => copy[n^2/2](inner_product(n)) *_C_* copy[n^2/2](inner_product(n)) => out[0 : n^2];
} 

component inner_product<a[n], b[n] | out[1]>(int n){
	zip(a[0 : n], b[0:n]) => recur(n, mul, add) => out[0];
}

component recur<in[2*n] | out[1]>(int n, comp combiner, comp reducer){
	int i;
	in[0:2*n] => copy[n](combiner)*_H_* foldr<*_H_*>(map<i = copy[i](reducer)>(map<i=2^i>(log2(n):0))) => out[0];
}
