module exp-trans

imports
	src-gen/signatures/Exp-sig
	src-gen/signatures/IntPair-sig
	helper
	deref
	desugar
	lib
//	system-trans
//	module-trans
//	location-trans
//	src-gen/names/lib
	
rules
	exp-to-int(|ast, varArray*, systemArray*):
		Int(num) -> <string-to-int> num
		
	exp-to-int(|ast, varArray*, systemArray*):
		VarRef(name) -> res
		with
			index := <get-var-index> name; 
			res := <index(|index)> varArray*
			
			
	exp-to-int(|ast, varArray*, systemArray*):
		FunApp(Log2(), None(), [value]) -> <exp-to-int(|ast, varArray*, systemArray*); log2> value
		
//	exp-to-int(|ast, varArray*, systemArray*):
//		NOT(value) -> <mod>(<add>(<exp-to-int(|ast, varArray*, systemArray*)> value, 1), 2)
//	
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Plus(), value1, value2) -> <add>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Minus(), value1, value2) -> <subt>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		 
	exp-to-int(|ast, varArray*, systemArray*): 
		BinExp(Times(), value1, value2) -> <mul>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(DividedBy(), value1, value2) -> <div>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Modulo(), value1, value2) -> <mod>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(ToThePower(), value1, value2) -> <exp-to-int(|ast, varArray*, systemArray*); pow(|<exp-to-int(|ast, varArray*, systemArray*)> value1)> value2
	
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, GreaterThan(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <gt> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, LessThan(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <lt> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, EqualTo(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <eq> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, And(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			res := <mul>(int1, int2)
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, Or(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			highRes := <add>(int1, int2);
//			if <gt>(highRes, 1) then
//				res := 1
//			else
//				res := highRes
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, MaxOf(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <gt>(int1, int2) then
//				res := int1
//			else
//				res := int2
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		FoldRight(op, array*) -> res
//		with
//			(unusedCompTuples*, thisRes) := <fold-to-value(|"error", [], varArray*, [])> FoldRight(op, array*);
//			if <eq>(<length> thisRes, 0) then
//				res := 0
//			else
//				res := thisRes
//			end
//	
//	exp-to-int(|ast, varArray*, systemArray*):
//		FoldLeft(op, array*) -> res
//		with
//			(unusedCompTuples*, thisRes) := <fold-to-value(|"error", [], varArray*, [])> FoldLeft(op, array*);
//			if <eq>(<length> thisRes, 0) then
//				res := 0
//			else
//				res := thisRes
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		CoordX(coord) -> x
//		with
//			(x, y) := <exp-to-coord(|ast, varArray*, systemArray*)> coord
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		CoordY(coord) -> y
//		with
//			(x, y) := <exp-to-coord(|ast, varArray*, systemArray*)> coord
//	
//	/*This one can only be called after referencing variables and CompAttr*/
//	
//	exp-to-int(|ast, varArray*, systemArray*):
//		CompAttr(ModRef(compNum, index), attr) -> res
//		with
//			thisSystem := <index(|compNum); index(|<index(|1)> index)> systemArray*;
//			res := <get-attr(|ast, thisSystem, varArray*)> attr
//	
//	exp-to-int(|ast, varArray*, systemArray*):
//		other -> other
//		
//	get-attr(|ast, system, varArray*):
//		Position() -> <system-get-modules; modules-get-bottom-left(|ast); intpair-to-tuple> system
//	
//	get-attr(|ast, system, varArray*):	
//		OutportPos(num) -> <location-get-bottom-left(|IntPair("32", "1")); intpair-to-tuple> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			outputTuple := <system-get-outputs; index(|intNum)> system;
//			portLocation := <system-get-outport(|ast, system)> outputTuple
//	
//	get-attr(|ast, system, varArray*):	
//		OutportRot(num) -> <location-get-angle> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			outputTuple := <system-get-outputs; index(|intNum)> system;
//			portLocation := <system-get-outport(|ast, system)> outputTuple	
//			
//	get-attr(|ast, system, varArray*):	
//		OutportMir(num) -> <location-get-mir> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			outputTuple := <system-get-outputs; index(|intNum)> system;
//			portLocation := <system-get-outport(|ast, system)> outputTuple
//			
//	get-attr(|ast, system, varArray*):	
//		InportPos(num) -> <location-get-bottom-left(|IntPair("32", "1")); intpair-to-tuple> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			inputTuple := <system-get-inputs; map(input-get-inputs); concat; index(|intNum)> system;
//			portLocation := <system-get-inport(|ast, system)> inputTuple
//		
//	get-attr(|ast, system, varArray*):	
//		InportRot(num) -> <location-get-angle> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			inputTuple := <system-get-inputs; map(input-get-inputs); concat; index(|intNum)> system;
//			portLocation := <system-get-inport(|ast, system)> inputTuple
//			
//	get-attr(|ast, system, varArray*):	
//		InportMir(num) -> <location-get-mir> portLocation
//		with
//			intNum := <exp-to-int(|"error", varArray*, []); inc> num;
//			inputTuple := <system-get-inputs; map(input-get-inputs); concat; index(|intNum)> system;
//			portLocation := <system-get-inport(|ast, system)> inputTuple
//		
//	get-attr(|ast, system, varArray*):
//		Size() -> <system-get-size; intpair-to-tuple> system
//		
//	get-attr(|ast, system, varArray*):
//		Delay() -> <system-get-latency; string-to-int> system
//		
//	get-attr(|ast, system, varArray*):
//		Rotation() -> 0
//		
//	get-attr(|ast, system, varArray*):
//		Mirror() -> 0
//		
//	get-attr(|ast, system, varArray*):
//		Time() -> <system-get-modules; map(module-get-start; string-to-int); foldr(!9999999, smallest-of)> system
//		
//	get-attr(|ast, system, varArray*):
//		otherAttr -> <debug(!"Cannot find value for attribute "); fail> otherAttr
//				
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CoordVal(exp1, exp2) -> (res1, res2)
//		with
//			res1 := <exp-to-int(|ast, varArray*, systemArray*)> exp1;
//			res2 := <exp-to-int(|ast, varArray*, systemArray*)> exp2
//			
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CoordTranslate(coord1, coord2) -> res
//		with
//			(x1, y1) := <exp-to-coord(|ast, varArray*, systemArray*)> coord1;
//			(x2, y2) := <exp-to-coord(|ast, varArray*, systemArray*)> coord2;
//			res := (<add>(x1, x2), <add>(y1, y2))
//			
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CoordRotate(coord, rot) -> (xres, yres)
//		with
//			(x, y) := <exp-to-coord(|ast, varArray*, systemArray*)> coord;
//			rotInt := <mod>(<exp-to-int(|ast, varArray*, systemArray*)> rot, 360);
//			if <eq>(rotInt, 0) then
//				xres := x;
//				yRes := y
//			else if <eq> (rotInt, 90) then
//				xres := <subt>(0, y);
//				yres := x
//			else if <eq> (rotInt, 180) then
//				xres := <subt>(0, x);
//				yres := <subt>(0, y)
//			else if <eq> (rotInt, 270) then
//				xres := y;
//				yres := <subt>(0, x)
//			else
//				<debug(!"Invalid angle: ")> rotInt
//			end end end end
//				
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CoordMirrorX(coord, mir) -> (xres, yres)
//		with
//			(xres, y) := <exp-to-coord(|ast, varArray*, systemArray*)> coord;
//			mirInt := <exp-to-int(|ast, varArray*, systemArray*)> mir;
//			if <eq>(mirInt, 0) then
//				yres := y
//			else
//				yres := <subt>(0, y)
//			end
//			
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CoordMirrorY(coord, mir) -> (xres, yres)
//		with
//			(x, yres) := <exp-to-coord(|ast, varArray*, systemArray*)> coord;
//			mirInt := <exp-to-int(|ast, varArray*, systemArray*)> mir;
//			if <eq>(mirInt, 0) then
//				xres := x
//			else
//				xres := <subt>(0, x)
//			end
//			
//	exp-to-coord(|ast, varArray*, systemArray*):
//		CompAttr(ModRef(compNum, array*), attr) -> res
//		with
//			thisSystem := <index(|compNum); index(|<index(|1)> array*)> systemArray*;
//			res := <get-attr(|ast, thisSystem, varArray*)> attr
	
	build-int-array(comp, mod |interval, inclusive):
		(begin, end) -> res*
		with
			if <comp>(end, begin) then
				res* := []
			else
				if <eq>(inclusive, 0) then
					firstElem := <mod>(begin, interval)
				else
					firstElem := begin
				end;
				thatRes* := <build-int-array(comp, mod | interval, inclusive)>(<mod>(begin, interval), end);
				res* := [firstElem, thatRes*]
			end
		
	shift-right(|num):
		array* -> res*
		with
			if <eq>(num, 0)
			then res* := array*
			else newNum := <subt>( <length> array*, <mod> (num, <length> array*));	 
				(arrayLeft*, arrayRight*) := <split-at(|newNum)> array*;
				res* := [arrayRight*, arrayLeft*]
			end
			
	shift-left(|num):
		array* -> res*
		with
			if <eq>(num, 0)
			then res* := array*
			else newNum := <mod> (num, <length> array*);
				(arrayLeft*, arrayRight*) := <split-at(|newNum)> array*;
				res* := [arrayRight*, arrayLeft*]
			end
//			
//	array-at-index(|array):
//		index -> <index(|index)> array
//		
//	array-eq:
//		(array1, array2) -> res
//		with
//			length1 := <length> array1;
//			length2 := <length> array2;
//			if <eq> (length1, length2) then
//				res := <zip(is-eq); foldr(!1, mul)> (array1, array2)
//			else
//				res := 0
//			end
//			
//	is-eq:
//		(num1, num2) -> res
//		with
//			if <eq>(num1, num2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-reverse(|attr, comp, index):
//		CompAttr(ModRef(compNum, indexNum), attr) -> (compNum, indexNum, 1, CompAttr(ModRef(comp, [index]), attr))
//		
//	exp-reverse(|attr, comp, index):
//		CompAttr(ModRef(compNum, indexNum), differentAttr) -> (compNum, indexNum, 0, CompAttr(ModRef(compNum, indexNum), differentAttr))
//		
//	/*
//	While it is theoretically possible that a coordVal could contain things that should be reversed,
//	there is no practical way why somthing should be ever describe this way,
//	and neither is there a practical way how it could be done
//	therefore, the possibility is not considered.
//	*/
//	exp-reverse(|attr, comp, index):
//  		CoordVal(exp1, exp2) -> (compNum, indexNum, num, CoordVal(exp1, exp2))
//  		with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2)
//  
// 	exp-reverse(|attr, comp, index):
//  		CoordX(exp) -> (compNum, indexNum, num, resExp)
//  		with
//  			(compNum, indexNum, num, thisExp) := <exp-reverse(|attr, comp, index)> exp;
//  			resExp := CoordX(exp)
//  		
//  	exp-reverse(|attr, comp, index):
//  		CoordY(exp) -> (compNum, indexNum, num, resExp)
//  		with
//  			(compNum, indexNum, num, thisExp) := <exp-reverse(|attr, comp, index)> exp;
//  			resExp := CoordY(exp)
//  		
//  	exp-reverse(|attr, comp, index):
//  		CoordTranslate(exp1, exp2) -> (compNum, indexNum, num, resExp)
//  		with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2);
//  			if <eq>(num1, 1) then
//  				resExp := CoordTranslate(newExp1, CoordMirrorX(CoordMirrorY(newExp2, 1), 1))
//  			else
//  				if <eq>(num2, 1) then
//  					resExp := CoordTranslate(newExp1, newExp2)
//  				else
//  					resExp := CoordTranslate(exp1, exp2)
//  				end
//  			end
//  	
//  	/*Coordinates should never be used in the assignment of rotation or mirror */
//  	exp-reverse(|attr, comp, index):
//  		CoordRotate(exp1, exp2) -> (compNum, indexNum, num, CoordRotate(exp1, exp2))
//  		with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2)  					
//  		
//  	exp-reverse(|attr, comp, index):
// 		 CoordMirrorX(exp1, exp2) -> (compNum, indexNum, num, CoordMirrorX(exp1, exp2))
// 		 with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2)
// 		 
//  	exp-reverse(|attr, comp, index):
//  		CoordMirrorY(exp1, exp2) -> (compNum, indexNum, num, CoordMirrorY(exp1, exp2))
//  		with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2)
//  		
//  	exp-reverse(|attr, comp, index):
//  		BinOp(exp1, op, exp2) -> (compNum, indexNum, num, resExp)
//  		with
//  			(compNum1, indexNum1, num1, newExp1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2, newExp2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2);
//  			resExp := <binop-reverse(|num1, num2)>(newExp1, op, newExp2)
//  		
//  	exp-reverse(|attr, comp, index):
//  		Int(num) -> (0, 0, 0, Int(num))
//  		
//  	exp-reverse(|attr, comp, index):
//  		NOT(exp) -> NOT(<exp-reverse(|attr, comp, index)> exp)
//  		
//  	exp-reverse(|attr, comp, index):
//  		PartOfArray(exp1, exp2) -> (compNum, indexNum, num)
//  		with
//  			(compNum1, indexNum1, num1) := <exp-reverse(|attr, comp, index)> exp1;
//  			(compNum2, indexNum2, num2) := <exp-reverse(|attr, comp, index)> exp2;
//  			(compNum, indexNum, num) := <combine-refs(|attr)>(compNum1, indexNum1, num1, compNum2, indexNum2, num2)
//  		
//  			
//  	
//  	combine-refs(|attr):
//  		(compNum1, indexNum1, num1, compNum2, indexNum2, num2) -> (compNum, indexNum, num)
//  		with
//  			if <eq>(num1, 1) then
//  				if <eq> (num2, 1) then
//  					if<eq> (compNum1, compNum2) then
//  						if <eq>(indexNum1, indexNum2) then
//  							(compNum, indexNum, num) := (compNum1, indexNum1, 1)
//  						end
//  					else
//  						<debug(!"Cannot reverse expression: to many references to assigned attribute")> attr;
//  						(compNum, indexNum, num) := <fail>
//  					end
//  				else
//  					(compNum, indexNum, num) := (compNum1, indexNum1, 1)
//  				end
//  			else
//  				if <eq> (num2, 1) then
//  					(compNum, indexNum, num) := (compNum2, indexNum2, 1)
//  				else
//  					(compNum, indexNum, num) := (0, 0, 0)
//  				end
//  			end
//  			
//  	binop-reverse(|num1, num2):
//  		(exp1, Plus(), exp2) -> resExp
//  		with
//  			if <eq>(num1, 1) then
//  				if <eq>(num2, 1) then
//  					resExp := <debug; fail>"Cannot reverse an add statement with refs on both sides."
//  				else
//  					resExp := BinOp(exp1, Minus(), exp2)
//  				end
//  			else
//  				if <eq>(num2, 1) then
//  					resExp := BinOp(exp2, Minus(), exp1)
//  				else
//  					resExp := BinOp(exp1, Plus(), exp2)
//  				end
//  			end
//  		
//  	binop-reverse(|num1, num2):
//  		(exp1, Minus(), exp2) -> resExp
//  		with
//  			if <eq>(num1, 1) then
//  				if <eq>(num2, 1) then
//  					resExp := <debug; fail>"Cannot reverse a minus statement with refs on both sides."
//  				else
//  					resExp := BinOp(exp1, Plus(), exp2)
//  				end
//  			else
//  				resExp := BinOp(exp1, Minus(), exp2)
//  			end
//  			
//  	binop-reverse(|num1, num2):
//  		(exp1, Times(), exp2) -> resExp
//  		with
//  			if <eq>(num1, 1) then
//  				if <eq>(num2, 1) then
//  					resExp := <debug; fail>"Cannot reverse a divide statement with refs on both sides."
//  				else
//  					resExp := BinOp(exp1, DividedBy(), exp2)
//  				end
//  			else
//  				if <eq>(num2, 1) then
//  					resExp := BinOp(exp2, DividedBy(), exp1)
//  				else
//  					resExp := BinOp(exp1, Times(), exp2)
//  				end
//  			end
//  			
//  	binop-reverse(|num1, num2):
//  		(exp1, DividedBy(), exp2) -> resExp
//  		with
//  			if <eq>(num1, 1) then
//  				if <eq>(num2, 1) then
//  					resExp := <debug; fail>"Cannot reverse a multiply statement with refs on both sides."
//  				else
//  					resExp := BinOp(exp1, Times(), exp2)
//  				end
//  			else
//  				resExp := BinOp(exp1, DividedBy(), exp2)
//  			end
//  			
//  	binop-reverse(|num1, num2):
//  		(exp1, otherOp, exp2) -> resExp
//  		with
//  			resExp := <debug(!"Cannot reverse expression with operator "); fail> otherOp