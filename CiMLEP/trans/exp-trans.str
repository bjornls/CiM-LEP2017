module exp-trans

imports
	src-gen/signatures/Exp-sig
	src-gen/signatures/IntPair-sig
	helper
	deref
	desugar
	lib
//	system-trans
//	module-trans
//	location-trans
//	src-gen/names/lib
	
rules
	exp-to-int(|ast, varArray*, systemArray*):
		Int(num) -> <string-to-int> num
		
	exp-to-int(|ast, varArray*, systemArray*):
		VarRef(name) -> res
		with
			index := <get-var-index> name; 
			res := <index(|index)> varArray*
			
			
	exp-to-int(|ast, varArray*, systemArray*):
		FunApp(Log2(), None(), [value]) -> <exp-to-int(|ast, varArray*, systemArray*); log2> value
		
//	exp-to-int(|ast, varArray*, systemArray*):
//		NOT(value) -> <mod>(<add>(<exp-to-int(|ast, varArray*, systemArray*)> value, 1), 2)
//	
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Plus(), value1, value2) -> <add>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Minus(), value1, value2) -> <subt>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		 
	exp-to-int(|ast, varArray*, systemArray*): 
		BinExp(Times(), value1, value2) -> <mul>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(DividedBy(), value1, value2) -> <div>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(Modulo(), value1, value2) -> <mod>(<exp-to-int(|ast, varArray*, systemArray*)> value1, <exp-to-int(|ast, varArray*, systemArray*)> value2)
		
	exp-to-int(|ast, varArray*, systemArray*):
		BinExp(ToThePower(), value1, value2) -> <exp-to-int(|ast, varArray*, systemArray*); pow(|<exp-to-int(|ast, varArray*, systemArray*)> value1)> value2
	
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, GreaterThan(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <gt> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, LessThan(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <lt> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, EqualTo(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <eq> (int1, int2) then
//				res := 1
//			else
//				res := 0
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, And(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			res := <mul>(int1, int2)
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, Or(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			highRes := <add>(int1, int2);
//			if <gt>(highRes, 1) then
//				res := 1
//			else
//				res := highRes
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		BinOp(value1, MaxOf(), value2) -> res
//		with
//			int1 := <exp-to-int(|ast, varArray*, systemArray*)> value1;
//			int2 := <exp-to-int(|ast, varArray*, systemArray*)> value2;
//			if <gt>(int1, int2) then
//				res := int1
//			else
//				res := int2
//			end
//			
//	exp-to-int(|ast, varArray*, systemArray*):
//		FoldRight(op, array*) -> res
//		with
//			(unusedCompTuples*, thisRes) := <fold-to-value(|"error", [], varArray*, [])> FoldRight(op, array*);
//			if <eq>(<length> thisRes, 0) then
//				res := 0
//			else
//				res := thisRes
//			end
//	
//	exp-to-int(|ast, varArray*, systemArray*):
//		FoldLeft(op, array*) -> res
//		with
//			(unusedCompTuples*, thisRes) := <fold-to-value(|"error", [], varArray*, [])> FoldLeft(op, array*);
//			if <eq>(<length> thisRes, 0) then
//				res := 0
//			else
//				res := thisRes
//			end
	
	build-int-array(comp, mod |interval, inclusive):
		(begin, end) -> res*
		with
			if <comp>(end, begin) then
				res* := []
			else
				if <eq>(inclusive, 0) then
					firstElem := <mod>(begin, interval)
				else
					firstElem := begin
				end;
				thatRes* := <build-int-array(comp, mod | interval, inclusive)>(<mod>(begin, interval), end);
				res* := [firstElem, thatRes*]
			end
		
	shift-right(|num):
		array* -> res*
		with
			if <eq>(num, 0)
			then res* := array*
			else newNum := <subt>( <length> array*, <mod> (num, <length> array*));	 
				(arrayLeft*, arrayRight*) := <split-at(|newNum)> array*;
				res* := [arrayRight*, arrayLeft*]
			end
			
	shift-left(|num):
		array* -> res*
		with
			if <eq>(num, 0)
			then res* := array*
			else newNum := <mod> (num, <length> array*);
				(arrayLeft*, arrayRight*) := <split-at(|newNum)> array*;
				res* := [arrayRight*, arrayLeft*]
			end
