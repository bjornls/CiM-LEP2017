module gen-dfg

imports

  libstratego-gpp
  src-gen/signatures/-
  program-trans
  funcblock-trans
  intpair-trans
  location-trans
  system-trans
  module-trans
  exp-trans
  helper
  skeleton-trans
  statement-trans
  deref
 // pp
  cimlep
  
//strategies
//	remove-vars(|varArray) = topdown(try(remove-var(|varArray)))

rules

   gen-dfg:
   	ast -> system
   	with
   		<run-time; debug(!"run-time before dereference: ")>"";
   		(tuples*, statements*) := <unroll-and-dereference(|ast)> ast; 
   		<run-time; debug(!"run-time after dereference: ")>"";
   		systemTuples* := <tuples-to-dfg(|ast, [])> tuples*;
   		system := <main-to-dfg(|ast, systemTuples*)> statements*;
   		<run-time; debug(!"run-time after spr: ")>"" 
   		
	tuples-to-dfg(|ast, systemTuples*):
		tuples* -> resSystemTuples*
		with
			if <gt>(<length> tuples*, 0) then 
				thisTuple := <last> tuples*;
				thisX := <tuple-getx> thisTuple;
				compIndex := <tuple-getx> thisX;
				args* := <tuple-gety> thisX;
				thisY := <tuple-gety; shift-right(|1)> thisTuple;
				systemArray* := <copy>(<add>(<get-comp-signal-num(|compIndex)> ast, 1), System([], [], [], IntPair("0", "0"), "0", "0")); 
				(inputSize, outputSize) := <get-comp-in-out-nums(|compIndex, args*)> ast;
				theseSystems* := <statements-to-dfg(|ast, systemArray*, systemTuples*, inputSize, 1); shift-left(|1)> thisY;
				thisSystem := <filter(is-not-empty); add-nops(|ast); connect-without-sorting(|ast)> theseSystems*;
				newTuple* := [(thisX, thisSystem)];
				newSystemTuples* := [systemTuples*, newTuple*];
				if	<eq>(<length> tuples*, 1) then
					resSystemTuples* := newSystemTuples*
				else
					thatTuples* := <take(|<subt>(<length> tuples*, 1))> tuples*;
					resSystemTuples* := <tuples-to-dfg(|ast, newSystemTuples*)> thatTuples*
				end
			else
				resSystemTuples* := []
			end

	/*
		ast-to-dfg for skeletons
	*/
   
   ast-to-dfg(|ast, systemTuples*):
     [skeleton | skeletons] -> resSystems*
     with
     	system1 := <ast-to-dfg(|ast, systemTuples*)> skeleton;
     	systems* := <map(ast-to-dfg(|ast, systemTuples*)); foldr(![], merge)> skeletons;
     	resSystems* := [system1, systems*]
   
   ast-to-dfg(|ast, systemTuples*):
   	 FuncBlockNum(string) -> System(module*, input*, output*, size, latency, energy)
   	 with
   	 	num := <string-to-int> string
   	 	; funcblock := <get-funcblock(|num)> ast
   	 	; incrementArray* := <copy; map-with-index(tuple-getx)>(<funcblock-get-output-num> funcblock, 0)
   	 	; sources* := <zip(tuple-to-intpair)>(<copy>(<funcblock-get-output-num> funcblock, 0), incrementArray*)
   	 	; module* := [Module(string,
   	 	  					 "0",
   	 	  					 Location(IntPair("0", "0"), "0", "0"),
   	 	  					 sources*)
   	 	  			  ]
   	 	; size := <funcblock-get-size> funcblock
   	 	; latency := <funcblock-get-latency> funcblock
   	 	; energy := <funcblock-get-energy> funcblock
   	 	; tmpin* := <copy>(<funcblock-get-input-num> funcblock, Input([IntPair("1", "1")]))
   	 	; input* := <nmap(input-sety|1)> tmpin*
   	 	; tmpout* := <copy>(<funcblock-get-output-num> funcblock, IntPair("1", "1"))
   	 	; output* := <nmap(intpair-sety|1)> tmpout*
   	 	  
   ast-to-dfg(|ast, systemTuples*):
   	Nop() -> System([Module("0",
   	 	  					 "0",
   	 	  					 Location(IntPair("0", "0"), "90", "1"),
   	 	  					 [])],
   	 	  			[Input([IntPair("1", "1")])], 
   	 	  			[IntPair("1", "1")], 
   	 	  			IntPair("32", "1"), "0", "0")
   	 	  			
//   ast-to-dfg(|ast, systemTuples*):
//   	Connect(skel, ConnOp(num), r) -> system
//   	with
//   		upstream := <ast-to-dfg(|ast, systemTuples*)> skel;
//  	 	downstream := <ast-to-dfg(|ast, systemTuples*)> r;
//  	 	currentSkeleton := <index(|num)> skeletons*;
//  	 	system := <connect-with-skeleton(|ast)>(upstream, currentSkeleton,  <to-list> downstream)
//  	 	
   ast-to-dfg(|ast, systemTuples*):
   	 Connect(skel, HTree(),r) -> system
   	 with
   	 	// check whether this operator can be solved by H-tree layout
   	 	(subsys*, n*) := <skeleton-get-tree-structure(|ast, systemTuples*)> Connect(skel, HTree(), r)
   	 	; system := <system-tree-reduce(|ast)> (subsys*, n*)
   	 	  
//   	ast-to-dfg(|ast, systemTuples*):
//   	 	Connect(skel, Linear(), r) -> <skeleton-get-linear-system(|ast, systemTuples*)>  Connect(skel, Linear(), r)
//   	
   	ast-to-dfg(|ast, systemTuples*):
   		Connect(skel1, Crowd(), skel2) -> res
   		with
   			mappedSys1* := <ast-to-dfg(|ast, systemTuples*); to-list> skel1;
   			mappedSys2* := <ast-to-dfg(|ast, systemTuples*); to-list> skel2;
   			res := <system-map-together(|ast, 1)>[mappedSys1*, mappedSys2*]
   			
   	ast-to-dfg(|ast, systemTuples*):
   		CompRef((num, args*), sizes*) -> <lookup>((num, args*), systemTuples*)
   			 
   	ast-to-dfg(|ast, systemTuples*):
		[] -> res*
		with
			res* := []
  	
   	main-to-dfg(|ast, systemTuples*):
   		statements -> res
   		with
   			(inputSize, outputSize, signalSizes) := <get-main-sizes> ast;
   			systemArray := <copy>(<add>(<length> signalSizes, 1), System([], [], [], IntPair("0", "0"), "0", "0")); 
   			dfgres := <statements-to-dfg(|ast, systemArray, systemTuples*, inputSize, 1); shift-left(|1)> statements;
   			newdfgres := <filter(is-not-empty); add-nops(|ast)> dfgres;
   			res := <connect-without-sorting(|ast)> newdfgres
   	
   	statements-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
   		[statement | statements*] -> res*
   		with
   			newSystemArray := <statement-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum)> statement;
   			res* := <statements-to-dfg(|ast, newSystemArray, systemTuples*, inputSize, <inc> sigNum)> statements*
   			
   	statements-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
   		[] -> systemArray*
   		
   	/*
   		The ast-to-dfg of signal assignment statements uses the denote-input strategy to
   		denote the signal that is the input of the connecting skeleton into the system that
   		has been generated from the connecting skeleton
   	*/
//   	
	statement-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
		OutputAssign(array, signal, Some(ConSkel(skel))) -> res*
		with
			skelsys* := <ast-to-dfg(|ast, systemTuples*)> skel;
			skelsys := <system-map-together(|ast, 0)>skelsys*;
			thisSys := <shuffle-with-signal(|inputSize)>(signal, skelsys);
			res* := <set-index>(0, <shuffle-with-array(|array)>thisSys, systemArray*)
			
	statement-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
		OutputAssign(array, signal, None()) -> res*
		with
			skelsys* := <length; empty-system> array;
			skelsys := <system-map-together(|ast, 0)>skelsys*;
			thisSys := <shuffle-with-signal(|inputSize)>(signal, skelsys);
			res* := <set-index>(0, <shuffle-with-array(|array)>thisSys, systemArray*)
//			
	statement-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
		SignalAssign(signal, Some(ConSkel(skel)), SigRef(num, array)) -> res*
		with
			
			skelsys* := <ast-to-dfg(|ast, systemTuples*)> skel;
			skelsys := <system-map-together(|ast, 0)>skelsys*;
			thisSys := <shuffle-with-signal(|inputSize)>(signal, skelsys);
			res* := <set-index>(num, <shuffle-with-array(|array)>thisSys, systemArray*)
			
	statement-to-dfg(|ast, systemArray*, systemTuples*, inputSize, sigNum):
		SignalAssign(signal, None(), SigRef(num, array)) -> res*
		with
			skelsys* := <length; empty-system> array;
			skelsys := <system-map-together(|ast, 0)>skelsys*;
			thisSys := <shuffle-with-signal(|inputSize)>(signal, skelsys);
			res* := <set-index>(num, <shuffle-with-array(|array)>thisSys, systemArray*) 
   	
	/*
		Denote a signal into the system that was generated from skeleton.
		This is done by first getting all indices of input signals from the signal,
		and using those to shuffle the current input ports.
		Then, it finds connections: the parts of the signal that reference other signals,
		and adds sources to the modules that are connected to those other signals
	*/
	
	shuffle-with-signal(|inputSize):
		(signal, System(mods*, inputs*, outputs*, size, time, energy)) ->  System(resMods*, resInputs*, resOutputs*, size, time, energy)
		with
			emptyInputs := <copy>(inputSize, Input([]));
			(signalLength, resMods*, resInputs*, resOutputs*) := <shuffle-mods-and-inputs(|inputs*)> (1, signal, mods*, emptyInputs, outputs*)
	
	shuffle-mods-and-inputs(|origInputs*):
		(index, InputSig(array), mods*, inputs*, outputs*) -> (newIndex, mods*, resInputs*, resOutputs*)
		with
			(newIndex, resInputs*, newOutputs*) := <shuffle-inputs-with-array(|origInputs*)> (index, array, inputs*, outputs*);
			resOutputs* := <map(deselect)> newOutputs*
	
	shuffle-mods-and-inputs(|origInputs*):
		(index, SigRef(num, array), mods*, inputs*, outputs*) -> (newIndex, resMods*, inputs*, resOutputs*)
		with
			(newIndex, resMods*, resOutputs*) := <set-mod-sources(|<map(input-get-inputs)>origInputs*, <subt>(0, num))>(index, array, mods*, outputs*)
	
	shuffle-mods-and-inputs(|origInputs*):
		(index, ConcurSig(signal1, signal2), mods*, inputs*, outputs*) -> (resIndex, resMods*, resInputs*, resOutputs*)
		with
			(newIndex, newMods*, newInputs*, newOutputs*) := <shuffle-mods-and-inputs(|origInputs*)> (index, signal1, mods*, inputs*, outputs*);
			(resIndex, resMods*, resInputs*, resOutputs*) := <shuffle-mods-and-inputs(|origInputs*)> (newIndex, signal2, newMods*, newInputs*, newOutputs*)
	
	shuffle-inputs-with-array(|origInputs*):
		(oldIndex, [newIndex, array*], inputs*, outputs*) -> (resIndex, resInputs*, resOutputs*)
		with
			additionalInput := <index(|oldIndex)> origInputs*;
			currentInput := <index(|newIndex)> inputs*;
			newInput := <input-merge>(currentInput, additionalInput);
			newInputs* := <set-index>(<subt>(newIndex, 1), newInput, inputs*);
			newOutputs* := <map(select(|<int-to-string> oldIndex, <int-to-string> newIndex))> outputs*;
			(resIndex, resInputs*, resOutputs*) := <shuffle-inputs-with-array(|origInputs*)>(<add>(oldIndex, 1), array*, newInputs*, newOutputs*)
			
	shuffle-inputs-with-array(|origInputs*):
		(oldIndex, [], inputs*, outputs*) -> (oldIndex, inputs*, outputs*)
		
	set-mod-sources(|inputs, modNum):
		(oldIndex, [newIndex, array*], mods*, outputs*) -> (resIndex, resMods*, resOutputs*)
		with
			intpairs* := <index(|oldIndex)> inputs;
			(newMods*, newOutputs*) := <set-mod-source(|modNum, newIndex)>(mods*, outputs*, intpairs*);
			(resIndex, resMods*, resOutputs*) := <set-mod-sources(|inputs, modNum)>(<add>(oldIndex, 1), array*, newMods*, newOutputs*)
		
	set-mod-sources(|inputs, modNum):
		(oldIndex, [], mods*, outputs*) -> (oldIndex, mods*, outputs*)
	
	set-mod-source(|modNum, newIndex):
		(mods*, outputs*, [intpair | intpairs*]) -> (resMods*, resOutputs*)
		with
		modIndex := <intpair-getx; string-to-int> intpair;
		portIndex := <intpair-gety; string-to-int> intpair;
		if <eq>(modIndex, 0) then
			newOutput := IntPair(<int-to-string> modNum, <int-to-string> newIndex);
			newOutputs* := <set-index>(<subt>(portIndex, 1), newOutput, outputs*);
			newMods* := mods*
		else
			currentMod := <index(|modIndex)> mods*;
			newMod := <module-set-source(|portIndex, IntPair(<int-to-string> modNum, <int-to-string> newIndex))> currentMod;
			newMods* := <set-index> (<subt> (modIndex, 1), newMod, mods*);
			newOutputs* := outputs*
		end;
		(resMods*, resOutputs*) := <set-mod-source(|modNum, newIndex)>(newMods*, newOutputs*, intpairs*)
	
	set-mod-source(|modNum, newIndex):
		(mods*, outputs*, []) -> (mods*, outputs*)
		
	select(|old, new):
		Input(array) -> Input(<map(select(|old, new))> array)
		
	select(|old, new):
		IntPair("0", old) -> IntPair("-1", new)
		
	select(|old, new):
		IntPair(x, y) -> IntPair(x, y)
		
	deselect:
		Input(array) -> Input(<map(deselect)> array)
		
	deselect:
		IntPair("-1", y) -> IntPair("0", y)
		
	deselect:
		IntPair(x, y) -> IntPair(x, y)
		
	shuffle-with-array(|array*):
		 System(mods*, inputs*, outputs*, size, time, energy) ->  System(mods*, <map(deselect)> resInputs*, resOutputs*, size, time, energy)
		 with
		 	(resInputs*, resOutputs*) := <shuffle-outputs-with-array(|outputs*)>(1, array*, inputs*, outputs*)
		 	
	shuffle-outputs-with-array(|origOutputs*):
		(index, [element|array*], inputs*, outputs*) -> (resInputs*, resOutputs*)  
		with
			if <gt>(index, <length> origOutputs*) then
				<debug>"ERROR: cannot assign skeleton to output signal of larger size than that skeleton."
			else	
				thisOutput := <index(|index)> origOutputs*;
				if <eq>(<intpair-getx; string-to-int> thisOutput, 0) then
					inIndex := <intpair-gety; string-to-int> thisOutput;
					thisInput := <index(|inIndex)> inputs*;
					newInput := <select(|<int-to-string> index,  <int-to-string> element)> thisInput;
					newInputs* := <set-index>(<subt>(inIndex, 1), newInput, inputs*)
				else
					newInputs* := inputs*
				end;
				newOutputs* := <set-index>(<subt>(element, 1), thisOutput, outputs*);
				(resInputs*, resOutputs*) := <shuffle-outputs-with-array(|origOutputs*)>(<add>(index, 1), array*, newInputs*, newOutputs*)
			end
			
	shuffle-outputs-with-array(|origOutputs*):
		(index, [], inputs*, outputs*) -> (inputs*, outputs*)
		
	/*
		Add NOPs that reserve space on the crossbar for connections that go between 
		different columns in the pipeline
	*/
	
	add-nops(|ast):
		systems* -> resSystems*
		with
			(inputNops*, connectionNops*) := <map-with-index(find-nop-locations(|ast, systems*)); unzip; merge-all> systems*;
			newSystems* := <add-input-nops(|ast, systems*, 1)> inputNops*;
			newerSystems* := <add-connect-nops(|ast, newSystems*, 1)> connectionNops*;
			resSystems* := <remove-inputs> newerSystems*
			
	find-nop-locations(|ast, systems*):
		(index, System(mods*, inputs*, outputs*, size, delay, energy)) -> res*
		with
			inputRes* := <map(input-get-inputs; copy-n-times(|<subt>(index, 1)); concat; nub)> inputs*;
			newInputRes* := <map(if-not-empty-add(|index))> inputRes*;
			connectRes* := <find-connect-nop-locs(|ast, systems*, index, 1)> mods*;
			res* := (newInputRes*, connectRes*)
	
	if-not-empty-add(|index):
		[] -> []
		
	if-not-empty-add(|index):
		[elem*] -> res*
		with
			res* := <zip>(<copy>(<length> elem*, index), elem*)
	
	find-connect-nop-locs(|ast, systems*, systemIndex, modIndex):
		[Module(modNum, size, location, sources*) | modules*] -> res*
		with
			nopSources* := <map-with-index(find-nop-source(|ast, systems*, systemIndex, modIndex)); concat> sources*;
			if <gt> (<length> sources*, 0) then
				thisRes* := <put-in-array(|systemIndex)> nopSources*;
				newModIndex := <add>(modIndex, 1);
				thatRes* := <find-connect-nop-locs(|ast, systems*, systemIndex, newModIndex)> modules*;
				res* := <uneven-zip(uneven-merge)>(thisRes*, thatRes*)
			else
				res* := [[]]
			end
			
	find-connect-nop-locs(|ast, systems*, index, modIndex):
		[] -> res*
		with
			res* := [[]]
	
	find-nop-source(|ast, systems*, systemIndex, modIndex):
		(portIndex, IntPair(x, y)) -> res*
		with
			if <lt>(<string-to-int>x, 0) then
				modNum := <subt>(0, <string-to-int>x);
				portNum :=  <string-to-int> y;
				res* := [(modNum, portNum, (systemIndex, IntPair(<int-to-string> modIndex, <int-to-string> portIndex)))]
			else
				res* := []
			end
		
	put-in-array(|currentSystem):
		[(x, y, tuple), tuples*] -> res*
		with
			diff := <subt> (x, currentSystem);
			if <gt>(diff, 0) then
				<debug>"Loops are not (yet) allowed!\n"
			else 
				if <lt>(diff, -1) then
					headRes* := <copy>(<dec> x, []);
					tailHead* := <copy>(<dec> y, []);
					tailRes := [tailHead*, [tuple]];
					thisRes* := [headRes*, tailRes]
				else
					thisRes* := [[]]
				end
			end;
			
			thatRes* := <put-in-array(|currentSystem)> tuples*;
			res* := <uneven-zip(uneven-merge)>(thisRes*, thatRes*)
	
	put-in-array(|currentSystem):
		[] -> res*
		with
			res* := []
	
	copy-n-times(|n):
		elem -> <copy>(n, elem)
	
	merge-all:
		(inArrays*, modArrays*) -> (resInArray*, resModArray*)
		with
			resInArray* := <foldr(![[]], uneven-zip(merge))> inArrays*;
			resModArray* := <foldr(![[]], uneven-zip(uneven-merge))> modArrays*
			
	add-input-nops(|ast, systems*, inputNo):
		[[] | tupleArrays*] -> resSystems*
		with
			resSystems* := <add-input-nops(|ast, systems*, <inc> inputNo)> tupleArrays*
			
	add-input-nops(|ast, systems*, inputNo):
		[] -> systems*
		
	add-connect-nops(|ast, systems*, systemNo):
		[[] |tuplesArrays*] -> resSystems*
		with
			resSystems* := <add-connect-nops(|ast, systems*, <inc> systemNo)> tuplesArrays*
		
	add-connect-nops(|ast, systems*, systemNo):
		[tupleArray* | tupleArrays*] -> resSystems*
		with
			newSystems* := <add-connect-nop(|ast, systems*, systemNo, 1)> tupleArray*;
			resSystems* := <add-connect-nops(|ast, newSystems*, <inc> systemNo)> tupleArrays*
		
	add-connect-nops(|ast, systems*, systemNo):
		[] -> systems*
		
	add-connect-nop(|ast, systems*, systemNo, portNo):
		[[] | tupleArrays*] -> resSystems*
		with
			resSystems* := <add-connect-nop(|ast, systems*, systemNo, <inc> portNo)> tupleArrays*
	
		
	add-connect-nop(|ast, systems*, systemNo, portNo):
		[] -> systems*
		
	remove-inputs:
		[system|systems*] -> resSystem*
		with
			newSystems* := <map(system-clear-inputs)> systems*;
			resSystem* := [system, newSystems*]
	
	/*
		Connect systems without sorting them: just connects them in the same order 
		as the one they were declared in, always putting the output last.
	*/
	
	connect-without-sorting(|ast):
		systems* -> resSystem
		with
//			length := <length> systems*;
//			if <eq> (length, 1) then
				resSystem := <index(|1)> systems*
//			else
//				sizes* := <map(system-get-module-num)> systems*;
//				additionalSizes := <fold-and-add(|0)> sizes*;
//				sysLocalInputTuples* := <map-with-index(resolve-connections(|systems*, additionalSizes))> systems*;
//				resSystem := <place-all(|ast)> sysLocalInputTuples*
//			end
//			
	fold-and-add(|index):
		[num, nums*] -> res*
		with
			thisRes := index;
			thatRes* := <fold-and-add(|<add>(index, num))> nums*;
			res* := [thisRes, thatRes*]
			
	fold-and-add(|index):
		[] -> res*
		with
			res* := []

	place-all(|ast):
		[(system, localInputs*) | systems*] -> resSystem
		with
			length := <length> systems*;
			if <eq> (length, 0) then
				resSystem := system
			else
				thatSystem := <Hd; tuple-getx> systems*;
				thatLocalInputs* := <Hd; tuple-gety> systems*;
				if <eq>(<system-get-module-num> thatSystem, 0) then
					newSystem := <merge-inputs-outputs>(system, thatSystem);
					updatedSystems* := systems*
				else
					(additionalModules, newSystem) := <place-in-X(|ast, thatLocalInputs*)>(system, thatSystem);
					updatedSystems* := <map(tuple-apply-on-y(map(input-map-to-inputs(intpair-addX-cond(gt|additionalModules, 0)))); tuple-apply-on-x(system-increase-mod-sources-by(gt|additionalModules, 0); system-increase-port-mods-by(gt|additionalModules, 0)))> systems*
				end;
				newSystems* := <set-index> (0, (newSystem, []), updatedSystems*);
				resSystem := <place-all(|ast)> newSystems*
			end
		
	is-not-empty:
		System([],[],[],IntPair("0","0"),"0","0") -> <fail>
		
	is-not-empty:
		System(mods*, [input | inputs1*], [output| outputs1*], size, delay, energy) -> System(mods*, [input | inputs1*], [output| outputs1*], size, delay, energy)
		
	merge-inputs-outputs:
		(System(mods*, inputs1*, outputs1*, size, delay, energy), System(_, inputs2*, outputs2*, _, _, _)) -> System(mods*, newInputs1*, outputs2*, size, delay, energy)
		with
			newInputs1* := <zip(input-merge)>(inputs1*, inputs2*)
		
