module system-trans

imports

  libstratego-gpp
  src-gen/signatures/System-sig
  src-gen/signatures/Module-sig
  src-gen/signatures/Location-sig
  src-gen/signatures/IntPair-sig
  src-gen/signatures/Exp-sig
  lib
  pp
  program-trans
  funcblock-trans
  module-trans
  location-trans
  helper
  intpair-trans
  skeleton-trans
  exp-trans
 
rules
	
	input-get-inputs:
		Input(array*) -> array*
		
	input-sety(|n):
		Input(array*) -> Input(<map(intpair-sety(|n))> array*)
			
	input-map-to-inputs(rule):
		Input(array*) -> Input(newArray*)
		with
			newArray* := <map(rule)> array*
		
	input-merge:
		(Input(array1*), Input(array2*)) -> Input([array1*, array2*])
		
	inputs-addx(|x*):
		(index, list) -> res*
		with
			length := <length> list;
			x := <index(|index)> x*;
			res* := <map(input-addx(|x))> list
		
	input-addx(|x):
		Input(array) -> Input(resArray)
		with
			resArray := <intpair-addx-for-list>(array, x)
			
	input-add-intpairs(|intpairs*):
		Input(array*) -> Input([array*, intpairs*])
			
	inputs-set-at-index(|index, intpair):
		Input(array*) -> Input(resArray*)
		with
			length := <length> array*;
			if <gt>(index, length) then
				diff := <subt>(<subt>(length, index), 1);
				emptyArray* := <copy>(diff, IntPair("0", "0"));
				lastElem* := [intpair];
				resArray* := [array*, emptyArray*, lastElem*]
			else
				resArray* := <set-index> (<subt>(index, 1), intpair, array*)
			end
		
	
		
	input-length:
		Input(array) -> <length> array
		
	input-clear:
		Input(_) -> Input([]) 
		
	system-get-modules:
		System(module*, input*, output*, size, latency, energy) -> module*

	system-get-inputs:
		System(module*, input*, output*, size, latency, energy) -> input*
  
	system-get-outputs:
		System(module*, input*, output*, size, latency, energy) -> output*
  
	system-get-size:
		System(module*, input*, output*, size, latency, energy) -> size
  
	system-get-latency:
		System(module*, input*, output*, size, latency, energy) -> latency
  
	system-get-energy:
		System(module*, input*, output*, size, latency, energy) -> energy

	system-get-module-num:
		System(module*, input*, output*, size, latency, energy) -> <length>module*

	system-get-input-num:
		System(module*, input*, output*, size, latency, energy) -> <length>input*
		
	system-get-inputs-num:
		System(module*, input*, output*, size, latency, energy) -> <map(input-length);foldr(!0, add)>input*

	system-get-output-num:
		System(module*, input*, output*, size, latency, energy) -> <length>output*
			
	system-rotate(|angle):
		System(module*, input*, output*, size, latency, energy) -> System(newModule*, input*, output*, size, latency, energy)
		with
			newModule* := <map(module-apply-to-location(location-rotate(|angle)))> module*
	
	system-get-module(|i):
		System(module*, input*, output*, size, latency, energy) -> mod
		with
	      len := <length> module*
	      ; if <geq> (len, i)
	        then mod := <index(|i)> module* 
	        else <debug(!"Index is too large: ")> i
	        end
	        
	system-clear-inputs:
		System(module*, input*, output*, size, latency, energy) -> System(module*, <map(input-clear)> input*, output*, size, latency, energy)
		
	system-set-start-time(|startTime):
		System(module*, input*, output*, size, latency, energy) -> System(newModule*, input*, output*, size, resLatency, energy)
		with
			modsStartTime := <map(module-get-start; string-to-int); foldr(!999999, smallest-of)>module*;
			diff := < subt>(<string-to-int> startTime, modsStartTime);
			newModule* := <map(module-delay(|diff))> module*;
			resLatency := <addS>(<int-to-string>diff, latency)
	        
	system-get-module-location(|i):
		sys -> <system-get-module(|i); module-get-location> sys

    // get the locations (position, orientation) of the output ports
	system-get-outports(|ast):
		system -> ports*
		with
			output* := <system-get-outputs> system
			; ports* := <map(system-get-outport(|ast, system))> output*
	
	system-get-inports(|ast):
		system -> ports*
		with
			input* := <system-get-inputs; map(input-get-inputs); concat> system
			; ports* := <map(system-get-inport(|ast, system))> input*
	
    // get the location of the yth output port of the xth module in system sys
	system-get-outport(|ast, sys):
		IntPair(x, y) -> location
		with
			mod := <system-get-module(|<string-to-int>x)> sys
			; funcblock := <module-get-funcblock(|ast)> mod
			; sub := <funcblock-get-output(|<string-to-int>y)> funcblock
			; location := <location-inherit(|<module-get-location> mod)> sub
	
	system-get-inport(|ast, sys):
		IntPair(x, y) -> location
		with
			mod := <system-get-module(|<string-to-int> x)> sys
			; funcblock := <module-get-funcblock(|ast)> mod
			; sub := <funcblock-get-input(|<string-to-int>y)> funcblock
			; location := <location-inherit(|<module-get-location> mod)> sub
			  
	system-increase-mod-sources-by(cond|n, bound):
		System(mod*, input*, o*, s, l, e) -> System(newmod*, input*, o*, s, l, e)
		with
			newmod* := <map(increase-module-num-by(cond|n, bound))> mod*
			
	system-increase-port-mods-by(cond|n, bound):
		System(mod*, input*, output*, s, l, e) -> System(mod*, newInput*, newOutput*, s, l, e)
		with
			newInput* := <map(input-map-to-inputs(intpair-addX-cond(cond|n, bound)))> input*;
			newOutput* := <map(intpair-addX-cond(cond|n, bound))> output*
			
	system-update-out-ports(|sizes*):
		System(mod*, input*, output*, s, l, e) -> System(mod*, input*, newOutput*, s, l, e)
		with
			newOutput* := <map(add-from-list(|sizes*))> output*
			
	system-set-source(|modNum, portNum, source):
		System(mod*, input*, output*, s, l, e) -> System(newMod*, input*, newOutput*, s, l, e)
		with
			if <eq>(modNum, 0)  then
				newOutput* := <set-index>(<dec>portNum, source, output*);
				newMod* := mod*
			else
				currentMod := <index(|modNum)> mod*;
				newMod := <module-set-source(|portNum, source)> currentMod;
				newMod* := <set-index>(<dec>modNum, newMod, mod*);
				newOutput* := output*
			end
			
	system-set-sources(|source, system):
		[IntPair(modNum, portNum) | intpairs*] -> resSystem
		with
			newSystem := <system-set-source(|<string-to-int> modNum, <string-to-int> portNum, source)> system;
			resSystem := <system-set-sources(|source, newSystem)> intpairs*
			
	system-set-sources(|source, system):
		[] -> system
		
	system-set-in-sources:
		System(mods*, in*, out*, size, latency, energy) -> System(resMods*, in*, out*, size, latency, energy)
		with
			resMods* := <modules-set-in-sources(|mods*, 1)> in*
			
	modules-set-in-sources(|modules*, inNum):
		[Input(intpairs*)| inputs*] -> resModules*
		with
			newModules* := <modules-set-in-sources(|modules*, inNum)> intpairs*;
			resModules* := <modules-set-in-sources(|newModules*, <inc>inNum)> inputs*
			
	modules-set-in-sources(|modules*, inNum):
		[IntPair(x, y)| intpairs*] -> resModules*
		with
			thisModule := <index(|<string-to-int> x)> modules*;
			newModule := <module-set-source(|<string-to-int> y, IntPair("0", <int-to-string> inNum))> thisModule;
			newModules* := <set-index>(<string-to-int; dec> x, newModule, modules*);
			resModules* := <modules-set-in-sources(|newModules*, inNum)> intpairs*
			
	modules-set-in-sources(|modules*, inNum):
		[] -> modules*
	
	system-move-to-origin(|ast):
		System(mod*, input*, output*, s, l, e) -> System(newMod*, input*, output*, s, l, e)
		with
			newMod* := <modules-shift-to-origin(|ast)> mod*
		
	system-add-input(|inputNo, port):
		System(mod*, input*, output*, s, l, e) -> System(mod*, newInput*, output*, s, l, e)
		with
			if <gt>(inputNo, <length> input*) then
				inputHead* := <copy>(<subt>(inputNo, 1), Input([]));
				inputTail* := [<input-add-intpairs(|[port])> Input([])];
				newInput* := [input*, inputHead*, inputTail*]
			else
				currentInput := <index(|inputNo)> input*;
				newInput := <input-add-intpairs(|[port])> currentInput;
				newInput* := <set-index>(<subt>(inputNo, 1), newInput, input*)
			end
			
	system-add-inputs(|moreInputs*):
		System(mod*, input*, output*, s, l, e) -> System(mod*, newInput*, output*, s, l, e)
		with
			newInput* := [input*|moreInputs*]
			
	system-remove-inputs:
		System(mod*, input*, output*, s, l, e) -> System(mod*, [], output*, s, l, e)
			
	system-add-output(|port):
		System(mod*, input*, output*, s, l, e) -> System(mod*, input*, newOutput*, s, l, e)
		with
			newPort* := [port];
			newOutput* := [output*, newPort*]
			
	system-add-outputs(|moreOutputs*):
		System(mod*, input*, output*, s, l, e) -> System(mod*, input*, newOutput*, s, l, e)
		with
			newOutput* := [output*|moreOutputs*]
			
	system-remove-outputs:
		System(mod*, input*, output*, s, l, e) -> System(mod*, input*, [], s, l, e)		
	
	add-from-list(|sizes*):
		IntPair(x, y) -> IntPair(newX, y)
		with
			index := <subt>(0, <string-to-int> x);
			if <gt>(index, 0) then
				newX := <add; string-to-int>(<string-to-int> x, <index(|index)> sizes*)
			else
				newX := x
			end
			  
	system-shift-module-links(|shift):
		System(mod*, input*, o*, s, l, e) -> System(newmod*, input*, o*, s, l, e)
		with
			newmod* := <increase-modules-num-by> (mod*, shift)
			
	systems-merge(|ast):
		(system, Nop()) -> system
			
	systems-merge(|ast):
		(System(mod1*, i1*, o1*, s1, l1, e1), System(mod2*, i2*, o2*, s2, l2, e2)) -> System(newMod*, newi*, newo*, news, l2, newe)
		with
			newe := <addS>(e1, e2);
			newMod* := [mod1*, mod2*];
			newi* := [i1*, i2*];
			newo* := [o1*, o2*];
			bl := <modules-get-bottom-left(|ast)> newMod*;
			tr := <modules-get-top-right(|ast)> newMod*;
			news := <intpair-sub>(tr, bl)
	
	system-link-by-intpairs(|pair*):
		System(mod*, input*, _, _, _, _) -> newmod*
		with
			inputs* := <map(input-get-inputs); concat> input*;
			if <not(eq)> (<length>pair*, <length> inputs*)
			then <debug(!"List length unmatched:")> pair*
			end
			; newmod* := <foldl(modules-link-by-intpair)> (<zip>(inputs*, pair*), mod*)
	
	system-tree-reduce(|ast):
		(subSys*, n*) -> system
		with
			(_, _, [system]) := <repeat-until(system-tree-reduce(|ast), ?([],_,_))> (subSys*, n*, [])

	system-tree-reduce(|ast):
		(subSys*, n*, lowSys*) -> (newSub*, newN*, newLow*)
		with
			NLen := <length> n*
			; subLen := <length> subSys*
			; sndLowNum := <last> n*
			; newNLen := <subt> (NLen, 1)
			; newSubLen := <subt> (subLen, sndLowNum)
			; newSub* := <take(|newSubLen)> subSys*
			; newN* := <take(|newNLen)> n*
			; sndLowSys* := <reverse; take(|sndLowNum)> subSys*
			; sndLow := <index(|1)> sndLowSys*
			; sndLowInputNum := <system-get-input-num> sndLow
			; lowSplit* := <list-split> (lowSys*, sndLowInputNum, sndLowNum)
			; newLow* := <zip(system-H-combine(|ast))> (sndLowSys*, lowSplit*)
	
	system-H-combine(|ast):
		(highSys, lowSys*) -> resSys
		with
		// placement following H-tree layout
   	 	n := <length> lowSys*;
   	 	if <eq>(n, 0) then
   	 		resSys := highSys
   	 	else
   	 		BL := <system-get-modules; modules-get-bottom-left(|ast)> highSys;
			TR := <system-get-modules; modules-get-top-right(|ast)> highSys;
	   	 	hInPort* := <system-get-inports(|ast); take(|n); map(move-to-edge(|ast, highSys, BL, TR))> highSys
	   	 	; lOutPort* := <map(system-get-outports(|ast); Hd)> lowSys*
	   	 	//; transLocation* := <zip(tuple-to-arg(location-adjust-to-target))> (lOutPort*, hInPort*)
	   	 	; transLocation* := <zip(location-adjust-to-target)> (lOutPort*, hInPort*)
	   	 	; lMod* := <map(system-get-ajusted-modules(|ast))> lowSys*
	   	 	; lModNum* := <map(length)> lMod*
	   	 	; lModShiftAndSum* := <scan(add)> (lModNum*, [0])
	   	 	; lModShift* := <init> lModShiftAndSum*
	   	 	; lShiftedMod* := <zip(increase-modules-num-by)> (lMod*, lModShift*)
	   	 	; lModule* := <zip(modules-transform); concat> (lShiftedMod*, transLocation*)
	   	 	  
	   	 	// update the linking information of the high system
	   	 	; lLatency* := <map(system-get-latency; string-to-int)> lowSys*
	   	 	; lowLatency := <foldl(max)> (lLatency*, 0)
	   	 	; hOldMod* := <system-get-modules> highSys
	   	 	; lModSum := <last> lModShiftAndSum*
	   	 	; hModUpdDalay* := <map(module-delay(|lowLatency); increase-module-num-by(gt|lModSum, 0))> hOldMod*
	   	 	; lOutput* := <map(system-get-outputs; Hd)> lowSys*
	   	 	; lOutPair* := <zip(intpair-addX)> (lModShift*, lOutput*)
	   	 	; hInput* := <system-get-inputs; map(input-get-inputs); concat; take(|n)> highSys
	   	 	; hModule* := <modules-link-by-intpairs> (hModUpdDalay*, hInput*, lOutPair*)
	
	   	 	; module* := <conc;modules-shift-to-origin(|ast)>(lModule*, hModule*)
	   	 	  
	   	 	// set other varibles
	   	 	; [lInput*] := <map(system-get-inputs)> lowSys*
	   	 	; lShiftedInput* := <map-with-index(inputs-addx(|lModShift*))> lInput*
	   	 	; input* := <concat> [lShiftedInput*, <system-get-inputs; drop(|n)> highSys]
	   	 	; output* := <system-get-outputs; map(intpair-addX(|lModSum))> highSys
	   	 	; size := <intpair-sub; intpair-abs>(<modules-get-bottom-left(|ast)> module*, <modules-get-top-right(|ast)> module*)
	   	 	; latency := <add; int-to-string>(<add>(<system-get-latency; string-to-int> highSys, lowLatency), 1)
	   	 	; lowEnergy := <foldl(addS)> (<map(system-get-energy)> lowSys*, "0")
	   	 	; energy := <addS>(<system-get-energy>highSys, lowEnergy)
	   	 	; resSys := System(module*, input*, output*, size, latency, energy)
	   	 end
	
	move-to-edge(|ast, system, BL, TR):
		Location(IntPair(x, y), rot, mir) -> Location(IntPair(newX, newY), rot, mir)
		with
			orientation := <location-get-orientation> Location(IntPair(x, y), rot, mir);
			if <eq>(orientation, 0) then
				newX := x;
				newY := <intpair-gety> BL
			else if <eq>(orientation, 1) then
				newX := <intpair-getx>TR;
				newY := y
			else if <eq>(orientation, 2) then
				newX := x;
				newY := <intpair-gety> TR
			else
				newX :=  <intpair-getx>BL;
				newY := y
			end end end
	
	// shift the positions of the modules, so that the edge is on the position of the first output port
	system-get-ajusted-modules(|ast):
		sys -> newmod*
		with
			output := <system-get-outputs; Hd> sys
			; location := <system-get-outport(|ast, sys)> output
			; pos := <location-get-pos> location
			; size := <system-get-size> sys
			; switch <location-get-flipped-angle> location
			  case ?"0": dis := IntPair("0", <intpair-gety> pos) 
			  case ?"90": dis := IntPair(<subtS>(<intpair-getx>pos, <intpair-getx>size), "0")
			  case ?"180": dis := IntPair("0", <subtS>(<intpair-gety> pos, <intpair-gety>size))
			  case ?"270": dis := IntPair(<intpair-getx> pos, "0")
			  otherwise: <debug(!"Bad angle of the output port:")> location
			  end
			; newmod* := <modules-transform> (<system-get-modules> sys, Location(dis, "0", "0"))
	
	/*
		Map a number of completely seperate systems on the same crossbar: 
		very unoptimal method that goes down the list of systems and either places it next to the last one or starts a new row.
	*/
	
	system-map-together(|ast, isCrowd):
		systems -> system
		with
			if <gt>(<length> systems, 0) then
				num := <length> systems;
				if <eq>(isCrowd, 1) then
					systemsPerRow := <int-sqrt> num
				else
					systemsPerRow := 1
				end;
				system := <create-rows(|ast, systemsPerRow, num)> systems
			else
				system := systems
			end
					
	create-rows(|ast, systemsPerRow, num):
		systems* -> system
		with
			//<debug(!"create rows")><geq> (num, systemsPerRow);
			if <geq> (num, systemsPerRow)
			then rowSystemList* :=  <take(|systemsPerRow)> systems*;
				thisSystem := <create-row(|ast)>  rowSystemList*;
				restLength := <subt>(num, systemsPerRow);
				restSystem* := <drop(|systemsPerRow)> systems*;
				thatSystem := <create-rows(|ast, systemsPerRow, restLength)> restSystem*;
				system := <combine-in-Y(|ast)> (thisSystem, thatSystem)
			else
				system := <create-row(|ast)> systems*
			end
				
	create-row(|ast):
		[system, systems*] -> newSystem
		with
			thatSystem := <create-row(|ast)> systems*;
			newSystem := <combine-in-X(|ast)> (system, thatSystem)
			
	create-row(|ast):
		[] -> System([],[], [], IntPair("0", "0"), "0", "0")
		
	// Place two already connected systems next to each other
	place-in-X(|ast, localInputs2*):
		(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2)) -> (numPaths, System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyNew, energyNew))
		with
			//<debug(!"place-in-X inputs: ")>(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2));
			modNum1 := <length> mods1*;
			modNum2 := <length> mods2*;
			if <eq>(modNum1, 0) then
				modsNew* := mods2*;
				inputsNew* := inputs2*;
				outputsNew* := outputs2*;
				numPaths := 0;
				energyNew := energy2;
				sizeNew := size2;
				latencyNew := latency2
			else if <eq>(modNum2, 0) then
				modsNew* := mods1*;
				inputsNew* := inputs1*;
				outputsNew* := outputs1*;
				numPaths := 0;
				energyNew := energy1;
				sizeNew := size1;
				latencyNew := latency1
			else
				connectionSpace := <mul>(<length> outputs1*, 32);
				(newMods1*, sizeNew, energyNew, xPos1) := <size-and-energy-in-X(|ast, connectionSpace)> (mods1*, size1, energy1, mods2*, size2, energy2);
				BL1 := <modules-get-bottom-left(|ast)> mods1*;
				TR1 := <modules-get-top-right(|ast)> mods1*;
				BL2 := <modules-get-bottom-left(|ast)> newMods1*;
				TR2 := <modules-get-top-right(|ast)> newMods1*;
				(newMods2*, unused, unusedInputs2*, newOutputs2*) := <system-add-mirrors(|ast, localInputs2*, outputs2*, 0, 0, 1, modNum1, BL1, TR1, BL2, TR2)>(mods1*, newMods1*, [], outputs1*, localInputs2*);
				newMods3* := <map(module-delay(|<addS; string-to-int>(latency1, "3")))> newMods2*;
				modsNew* := [mods1*, newMods3*];
				inputsNew* := <uneven-zip(input-merge)>(inputs1*, inputs2*);
				outputsNew* := newOutputs2*;
				numPaths := <subt>(<length> newMods2*, <length> mods2*);
				latencyNew := <addS>(<addS>(latency1, latency2), "3")
			end end
			//;<debug(!"place-in-X output: ")> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyNew, energyNew)
	
	is-path:
		Module("-1", _,_, _) -> 1
		
	is-path:
		Module("-2", _, _, _) -> 1
		
	is-path:
		non-path -> 0
	
	// Place two systems next to each other in the x direction
		
	combine-in-X(|ast):
		(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2)) -> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyNew, energyNew)
		with
			modNum1 := <length> mods1*;
			inNum1 := <length> inputs1*;
			(newMods1*, sizeNew, energyNew, unused) := <size-and-energy-in-X(|ast, 0)> (mods1*, size1, energy1, mods2*, size2, energy2);
			newMods2* := <map(increase-module-num-by(gt|modNum1, 0))> newMods1*;
			modsNew* := [mods1*, newMods2*];
			newInputs2* := <map(input-map-to-inputs(intpair-addX-cond(gt|modNum1, 0)))>inputs2*;
			inputsNew* := [inputs1*, newInputs2*];
			newOutputs2* := <map(update-outport(|modNum1, inNum1))> outputs2*;
			outputsNew* := [outputs1*, newOutputs2*];
			latencyNew := <max; int-to-string>(<string-to-int> latency1, <string-to-int> latency2)
	
	// Place two systems next to each other in the y direction
	
	combine-in-Y(|ast):
		(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2)) -> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyNew, energyNew)
		with
			//<debug(!"Input of combine-in-y: ")> (System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2));
			topRightCorner1 := <modules-get-top-right(|ast)> mods1*;
			bottomLeftCorner2 := <modules-get-bottom-left(|ast)> mods2*;
			yDifference := <intpair-sub; intpair-gety; string-to-int>(topRightCorner1, bottomLeftCorner2);
			height1 := <intpair-gety;  string-to-int> size1;
			height2 := < intpair-gety;  string-to-int> size2;
			newHeight := <add; int-to-string> (height1, height2);
			width1 := <intpair-getx; string-to-int> size1;
			width2 := <intpair-getx; string-to-int> size2;
			newWidth := <max; int-to-string>(width1, width2);
			sizeNew := IntPair(newWidth, newHeight);
			modNum1 := <length> mods1*;
			inNum1 := <length> inputs1*;
			outNum1 := <length> outputs1*;
			newMods1* := <module-shiftY-for-list> (mods2*, yDifference);
			newMods2* := <map(increase-module-num-by(gt|modNum1, 0))> newMods1*;
			modsNew* := [mods1*, newMods2*];
			newInputs1* := <map(input-map-to-inputs(intpair-addY-cond(eq|outNum1, 0)))>inputs2*;
			newInputs2* := <map(input-map-to-inputs(intpair-addX-cond(gt|modNum1, 0)))>newInputs1*;
			inputsNew* := [inputs1*, newInputs2*];
			newOutputs2* := <map(update-outport(|modNum1, inNum1))> outputs2*;
			outputsNew* := [outputs1*, newOutputs2*];
			latencyNew := <max; int-to-string>(<string-to-int> latency1, <string-to-int> latency2);
			energyNew := <addS>(energy1, energy2)
			//;<debug(!"Result of combine in Y:")> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyNew, energyNew)
	
	// Place two systems next to each other in the x direction, and connect them
	
	connect-in-X(|ast):
		(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2)) -> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyRes, energyNew)
		with
			//<debug(!"connect-in-X inputs: ")>(System(mods1*, inputs1*, outputs1*, size1, latency1, energy1), System(mods2*, inputs2*, outputs2*, size2, latency2, energy2));
			modNum1 := <length> mods1*;
			
			connectionSpace := <mul>(<map(remove-inout); try(concat); length> outputs1*, 32);
			(newMods1*, sizeNew, energyNew, xPos1) := <size-and-energy-in-X(|ast, connectionSpace)> (mods1*, size1, energy1, mods2*, size2, energy2);
			BL1 := <modules-get-bottom-left(|ast)> mods1*;
			TR1 := <modules-get-top-right(|ast)> mods1*;
			BL2 := <modules-get-bottom-left(|ast)> newMods1*;
			TR2 := <modules-get-top-right(|ast)> newMods1*;
			(newMods2*, unused, newInputs2*, newOutputs2*) := <system-add-mirrors(|ast, inputs2*, outputs2*, 0, 0, 1, 0, BL1, TR1, BL2, TR2)>(mods1*, newMods1*, [], outputs1*, inputs2*);
			newMods3* := <map(increase-module-num-by(gt|modNum1, 0))> newMods2*;
			newMods4* := <connect-sources> (newMods3*, outputs1*, newInputs2*);
			newMods5* := <map(module-delay(|<addS; string-to-int>( latency1, "3")))> newMods4*;
			modsNew* := [mods1*, newMods5*];
			inputsNew* := <map(link-inputs(|modNum1, newInputs2*))> inputs1*;
			outputsNew* := <map(link-output(|modNum1, outputs1*))> newOutputs2*;			
			latencyNew := <add; int-to-string>(<string-to-int> latency1, <string-to-int> latency2);
			if <gt>(modNum1, 0) then
				if <gt>(<length> mods2*, 0) then
					latencyRes := <addS>(latencyNew, "3")
				else
					latencyRes := latencyNew
				end
			else
				latencyRes := latencyNew
			end
			//;<debug(!"connect-in-X output: ")> System(modsNew*, inputsNew*, outputsNew*, sizeNew, latencyRes, energyNew)
	
	remove-inout:
		IntPair("0", _) -> []
		
	remove-inout:
		IntPair(_, _) -> [1]

	
	size-and-energy-in-X(|ast, connectionSpace):
			(mods1*, size1, energy1, mods2*, size2, energy2)-> (modsNew*, sizeNew, energyNew, xPos1)
			with
			topRightCorner1 := <modules-get-top-right(|ast)> mods1*;
			bottomLeftCorner2 := <modules-get-bottom-left(|ast)> mods2*;
			xPos1 := <intpair-getx> topRightCorner1;
			xDifference := <intpair-sub; intpair-getx; string-to-int>(topRightCorner1, bottomLeftCorner2);
			height1 := <intpair-gety; string-to-int> size1;
			height2 := <intpair-gety; string-to-int> size2;
			newHeight := <max; int-to-string> (height1, height2);
			width1 := <intpair-getx;string-to-int> size1;
			width2 := <intpair-getx;string-to-int> size2;
			newWidth := <add; int-to-string>(<add>(width1, width2), connectionSpace);
			sizeNew := IntPair(newWidth, newHeight);
			modsNew* := <module-shiftX-for-list> (mods2*, <add> (xDifference, connectionSpace));
			energyNew := <addS>(energy1, energy2)	
			
	system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, inputNum, modNum1, BL1, TR1, BL2, TR2):
		(mods1*, mods2*, mirs*, outputs*, [Input([]) | inputs*]) -> <system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, <inc>inputNum, modNum1, BL1, TR1, BL2, TR2)>(mods1*, mods2*, mirs*, outputs*, inputs*)
			
//	system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, inputNum, modNum1, BL1, TR1, BL2, TR2):
//		(mods1*, mods2*, mirs*, [output | outputs*], [input | inputs*]) -> (resMods*, resMirs*, resInputs*, resOutputs*)
//		with
//			outTuple := <intpair-to-tuple> output;
//			inTuples* := <input-get-inputs; map(intpair-to-tuple; get-connected); concat> input; //intpair-addX-cond(gt|<subt>(addMir, modNum1), 0);
//			if <?(0, _)> outTuple then
//				(resMods*, resMirs*, resInputs*, resOutputs*) := <system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, <inc> inputNum, modNum1, BL1, TR1, BL2, TR2)>(mods1*, mods2*, mirs*, outputs*, inputs*)
//			else if <eq>(<length> inTuples*, 0) then
//				(resMods*, resMirs*, resInputs*, resOutputs*) := <system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, <inc> inputNum, modNum1, BL1, TR1, BL2, TR2)>(mods1*, mods2*, mirs*, outputs*, inputs*)
//			else
//				outputLocation :=  <tuple-to-port-location(funcblock-get-output|ast, mods1*, 0); move-to-edge(|ast, System(mods1*, [], [], IntPair("0", "0"), "0", "0"), BL1, TR1)> outTuple;
//				inputLocations* :=  <map(tuple-to-port-location(funcblock-get-input|ast, mods2*, modNum1); move-to-edge(|ast, System(mods2*, [], [], IntPair("0", "0"), "0", "0"), BL2, TR2))> inTuples*;
//				(newMods*, tempMirs*, newInputs*) := <add-mirrors(|mods2*, counter, addMir, inputNum, inputs2*, modNum1, modNum1, <tuple-to-intpair>outTuple)>(outputLocation, inputLocations*);
//				if <eq>(<length> tempMirs*, 0) then
//					newCounter := counter
//				else
//					newCounter := <inc> counter
//				end;
//				newAddMir := <add>(addMir, <length> tempMirs*);
//				newMirs* := [mirs*, tempMirs*];
//				(resMods*, resMirs*, resInputs*, resOutputs*) := <system-add-mirrors(|ast, newInputs*, outputs2*, newCounter, newAddMir, <inc> inputNum, modNum1, BL1, TR1, BL2, TR2)>(mods1*, newMods*, newMirs*, outputs*, inputs*)
//			end end
				
			
	system-add-mirrors(|ast, inputs2*, outputs2*, counter, addMir, inputNum, modNum, BL1, TR1, BL2, TR2):
		(mods1*, mods2*, mirs*, [], []) -> (resMods*, [], resInputs*, resOutputs*)
		with
			(resMods*, resInputs*, resOutputs*) := <merge-mirrors-and-modules(|modNum)> (mods2*, mirs*, inputs2*, outputs2*)
		 
	get-connected:
		(0, _) -> []
		
	get-connected:
		(x, y) -> [(x, y)]
			
	tuple-to-port-location(port-rule | ast, mods*, prevModNum):
		(modNum, portNum)-> portLocation
		with
			modId := <index(|<subt>(modNum, prevModNum)); module-get-id; string-to-int> mods*;
			modLocation := <index(|<subt>(modNum, prevModNum)); module-get-location> mods*;
			portLocation := <get-funcblock(|modId); port-rule(|portNum); location-inherit(|modLocation)> ast
				
	link-output(|n, outputs1*):
		IntPair(x, y) -> IntPair(newX, newY)
		with
			intX := <string-to-int> x;
			if <eq> (intX, 0) then
				index := <string-to-int> y;
				intpair := <index(|index)>outputs1*;
				newX := <intpair-getx> intpair;
				newY := <intpair-gety> intpair
			else
				newY := y;
				newX := <add; int-to-string>(intX, n)
			end
			
	update-outport(|modNum, inNum):
		IntPair(x, y) -> IntPair(newX, newY)
		with
		intX := <string-to-int> x;
			if <eq> (intX, 0) then
				newX := x;
				newY := <addS>(y, <int-to-string> inNum)
			else
				newY := y;
				newX := <add; int-to-string>(intX, modNum)
			end
			
	link-inputs(|n, inputs2*):
		Input(intpairs*) -> Input(<map(link-input(|n, inputs2*)); concat> intpairs*)
			
	link-input(|n, inputs2*):
		IntPair(x, y) -> resIntPairs*
		with
			if <eq>(<string-to-int> x, 0) then
				index:= <string-to-int> y;
				resIntPairs* := <index(|index); input-get-inputs; map(intpair-addX-cond(gt|n, 0))>  inputs2*
			else
				resIntPairs* := [IntPair(x,y)]
			end
			
	find-port(|target):
		(index, target) -> res*
		with
			res* := [index]
			
	find-port(|target):
		(index, notTarget) -> res*
		with res* := []
		
	at-index(|list*):
		index -> <index(|index)> list*
			
	shuffle-inputs(|origInputs*):
		(inputs*, [num | array*], index) -> resInputs*
		with
			origInput := <index(|index)> origInputs*;
			currentInput := <index(|num)> inputs*;
			newInput := <input-merge>(origInput, currentInput);
			newInputs* := <set-index>(<subt> (num, 1), newInput, inputs*);
			resInputs* := <shuffle-inputs(|origInputs*)> (newInputs*, array*, <add>(index, 1))
			
	shuffle-inputs(|origInputs*):
		(inputs*, [], index) -> inputs*
	
	// Connect an output port of a previous system to the input port of the current system
	
	connect-sources:
		(mods*, [output | outputs*], [Input([]) | inputs*]) -> <connect-sources>(mods*, [output | outputs*], inputs*)
		
	connect-sources:
		(mods*, [],  [Input([]) | inputs*]) -> mods*
	
	connect-sources:
		(mods*, [output | outputs*], [input | inputs*]) -> resMods*
		with
			newMods* := <connect-source>(mods*, output, <input-get-inputs> input);
			resMods* := <connect-sources>(newMods*, outputs*, inputs*)
	
	connect-sources:
		(mods*, [], []) -> mods*
			
	connect-sources:
		(mods*, [], _) -> <fail>
		with
			<debug(!"Cannot connect skeletons with different input and output sizes")>"."
	
	connect-sources:
		(mods*, _, []) -> <fail>
		with
			<debug(!"Cannot connect skeletons with different input and output sizes")>"."
	
	connect-source:
		(mods*, output, [IntPair(x, y) | intpairs*]) -> resMods*
		with
			index := < string-to-int> x;
			if <eq>(index, 0) then
				newMods* := mods*
			else
				currentMod := <index(|index)> mods*;
				newMod := <module-set-source(|<string-to-int> y, output)> currentMod;
				newMods* := <set-index>(<subt>(index, 1), newMod, mods*)
			end;
			resMods* := <connect-source>(newMods*, output, intpairs*)
			
	connect-source:
		(mods*, output, []) -> mods*
			
	increase-modules-num-by:
		(mod*, num) -> <map(increase-module-num-by(gt|num, 0))> mod*
			
	increase-module-num-by(cond|num, boundary):
		Module(index, time, location, sources*) -> Module(index, time, location, newSources*)
		with
			newSources* := <map(intpair-addX-cond(cond|num, boundary))> sources*
	
	empty-system:
		size -> System(mods*, inputs*, outputs*, IntPair("0", "0"), "0", "0")
		with
			mods* := [];
			inputs* := <map-with-index(create-input)> <copy>(size, 0);
			outputs* := <map-with-index(create-port)> <copy>(size, 0)
	
	create-port:
		(index, _) -> IntPair("0", <int-to-string> index)
		
	create-input:
		(index, _) -> Input([IntPair("0", <int-to-string> index)])
		
	place-system(|ast, x, y, rot, mir):
		System(modules*, i*, o*, s, d, e) -> System(newModules*,  i*, o*, s, d, e)
		with
			bottomLeft := <modules-get-bottom-left(|ast)> modules*;
			modulesAtZero* := <map(module-transform(|Location(<intpair-sub>(IntPair("0", "0"), bottomLeft), "0", "0")))> modules*;
			newModulesAtZero* := <map(module-apply-to-location(location-rotate-around-origin(|rot); location-flip-in-X(|mir)))> modulesAtZero*;
			newModules* := <map(module-transform(|Location(<tuple-to-intpair>(x, y), "0", "0")))> newModulesAtZero*
	
	set-systems-connection(|ast, systems*, outIndex, inIndex, addUsSizes*, addDsSizes*):
		systems* -> resSystems*
		with
			outTuple := <get-port-num(system-get-output-num|1, <index(|1)> systems*)> outIndex;
			inTuple := <get-port-num(system-get-input-num|1, <index(|2)> systems*)> inIndex;
			resSystems* := <set-connections(|ast, systems*, addUsSizes*, addDsSizes*)>(outTuple, inTuple)
			
	get-port-num(get-port-rule|currentNum, systems*):
		index -> (systemNum, portNum)
		with
			thisSysSize := <index(|currentNum); get-port-rule> systems*;
			if <leq> (index, thisSysSize) then
				(systemNum, portNum) := (currentNum, index)
			else
				(systemNum, portNum) := <subt; get-port-num(get-port-rule | <inc>(currentNum), systems*)> (index, thisSysSize)
			end
			
	set-connections(|ast, systems*, addUsSizes*, addDsSizes*):
		((outSysNum, outPortNum), (inSysNum, inPortNum)) -> resSystems*
		with
			thisSystem := <index(|2); index(|inSysNum)> systems*;
			connectSystem := <index(|1); index(|outSysNum)> systems*;
			thisOutput := <index(|1); index(|outSysNum); system-get-outputs; index(|outPortNum)> systems*;
			thisInputs* := <index(|2); index(|inSysNum); system-get-inputs; index(|inPortNum); input-get-inputs> systems*;
			newOutput := <intpair-addX-cond(gt|<index(| outSysNum)> addUsSizes*, 0); intpair-addX(|<subt>(0, <index(|inSysNum)> addDsSizes*))> thisOutput;
			newSystem := <system-set-sources(|newOutput,  thisSystem)>	thisInputs*;
			newUsSystems* := <set-index>(<subt>(inSysNum, 1), newSystem, <index(|2)> systems*);
			resSystems* := <set-index>(1, newUsSystems*, systems*)			