module intpair-trans

imports

  libstratego-gpp
  src-gen/signatures/IntPair-sig
  location-trans
  helper

rules
	
	intpair-getx:
		IntPair(x, y) -> x
  
	intpair-gety:
		IntPair(x, y) -> y
		
	intpair-setx(|newx):
		IntPair(x, y) -> IntPair(<int-to-string>newx, y)
  
	intpair-sety(|newy):
		IntPair(x, y) -> IntPair(x, <int-to-string>newy)
  
	intpair-add(|p):
		IntPair(x, y) -> IntPair(newx, newy)
		with
			newx := <addS> (x, <intpair-getx> p)
			; newy := <addS> (y, <intpair-gety> p)
  
	intpair-addX(|n):
		IntPair(x, y) -> IntPair(newx, y)
		with
			newx := <addS> (x, <int-to-string> n)
			
	intpair-addX-cond(cond|n, bound):
		IntPair(x, y) -> IntPair(newx, y)
		with
			if <cond>(<string-to-int> x, bound) then
				newx := <addS> (x, <int-to-string> n)
			else
				newx := x
			end
			
	intpair-addY-cond(cond|n, bound):
		IntPair(x, y) -> IntPair(x, newy)
		with
			if <cond>(<string-to-int> x, bound) then
				newy := <addS> (y, <int-to-string> n)
			else
				newy := y
			end
  
	intpair-addX:
		(int, IntPair(x, y)) -> IntPair(newx, y)
		with
			newx := <add; int-to-string> (<string-to-int> x, int)

	intpair-addY(|n):
		IntPair(x, y) -> IntPair(x, newy)
		with
			newy := <addS> (y, <int-to-string> n)
			
	intpair-sub:
		(IntPair(x1, y1), IntPair(x2, y2)) -> IntPair(<subtS>(x1, x2), <subtS>(y1, y2))
		
	intpair-abs:
		(IntPair(x, y)) -> IntPair(<string-to-int; abs; int-to-string> x, <string-to-int; abs; int-to-string> y)
		
	intpair-neg:
		pair -> <intpair-sub> (IntPair("0", "0"), pair)
  
	intpair-mulx(|n):
		IntPair(x, y) -> IntPair(newx, y)
		with
			newx := <mulS> (x, <int-to-string> n)
  
	intpair-muly(|n):
		IntPair(x, y) -> IntPair(x, newy)
		with
			newy := <mulS> (y, <int-to-string> n)
			
	intpair-half:
		IntPair(x, y) -> IntPair(resX, resY)
		with
			resX := <divS>(x, "2");
			resY := <divS>(y, "2")
			
	intpair-inv:
		IntPair(x, y) -> IntPair(<subtS>("0", x), <subtS>("0", y))
	
	intpair-starts-with-zero:
		IntPair("0", y) -> IntPair("0", y)
					
	intpair-unmarkY:
		IntPair(x, y) -> IntPair(x, newY)
		with
			if <lt> (<string-to-int> y, 0) then
				newY := <subtS>("0", y)
			else
				newY := x
			end
  			
	intpair-rotate(|angle):
		IntPair(x, y) -> IntPair(newx, newy)
		with
			switch !angle
			case ?"0":
				newx := x
				; newy := y
			case ?"90":
				newx := <subtS> ("0", y)
				; newy := x
			case ?"180":
				newx := <subtS> ("0", x)
				; newy := <subtS> ("0", y)
			case ?"270":
				newx := y
				; newy := <subtS> ("0", x)
			otherwise:
				<debug(!"Invalid angle: ")> angle
			end
  
	intpair-mirror(|mir):
		IntPair(x, y) -> IntPair(x, newy)
		with
			if <is-one> mir
			then newy := <subtS> ("0", y)
			else newy := y
			end
  
	intpair-transform(|pos, angle, mir):
		origin -> <intpair-mirror(|mir); intpair-rotate(|angle); intpair-add(|pos)> origin
  
	intpair-transform(|location):
		origin -> <intpair-transform(|pos, angle, mir)> origin
		with
			pos := <location-get-pos> location
			; angle := <location-get-angle> location
			; mir := <location-get-mir> location
			  
	intpair-replace(|toReplace, replaceWith):
		IntPair(x, y) -> res
		with
			thatX := <intpair-getx> toReplace;
			thatY := <intpair-gety> toReplace;
			if(<eq> (<string-to-int> x, <string-to-int> thatX)) then
				if(<eq> (<string-to-int> y, <string-to-int> thatY)) then
					res := replaceWith
				else
					res := IntPair(x, y)
				end
			else
				res := IntPair(x, y)
			end

  /**
   * Repete intpair list n times, with each time increase modNum in x value
   *
   * Example: intpair-shift-with-indices(|3, 5) [(1.1),(1.2)]
   * => [(1.1),(1.2),(6.1),(6.2),(11.1),(11.2)]
   *
   * @type List(IntPair) -> List(IntPair)
   */
  intpair-shift-with-indices(|n, modNum): 
    pair* -> newpair*
    with
    	temp* := <copy>(n, pair*)
    	; list* := <natural;map(int-mul(|modNum))> n
    	; newpair* := <zip(intpair-addx-for-list); concat> (temp*, list*)
    	  
   intpair-addx-for-list:
   	(pair*, n) -> <map(intpair-addX(|n))> pair*
    	 
   intpairs-get-bottom-left:
   	pair* -> <foldl(intpair-bottom-left)> (pair*, IntPair("2147483647", "2147483647"))
   	
   intpair-bottom-left:
   	(IntPair(x1, y1), IntPair(x2, y2)) -> IntPair(<minS>(x1, x2), <minS>(y1, y2))
    	 
   intpairs-get-top-right:
   	pair* -> <foldl(intpair-top-right)> (pair*, IntPair("0", "0"))
   	
   intpair-top-right:
   	(IntPair(x1, y1), IntPair(x2, y2)) -> IntPair(<maxS>(x1, x2), <maxS>(y1, y2))
   	
   intpair-are-alligned:
   	(IntPair(x, y1), IntPair(x, y2)) -> 1
   	
   intpair-are-alligned:
   	(IntPair(x1, y), IntPair(x2, y)) -> 1
   	
   intpair-bl-to-coord(|s,  rot,  mir):
   	intpair -> res
   	with
   		if <eq>(mir, "0") then
   			if <eq>(rot, "0") then
   				addSize := IntPair("0", "0")
   			else if <eq>(rot, "90") then
   				addSize := IntPair(<intpair-gety> s, "0")
   			else if <eq>(rot, "180") then
   				addSize := IntPair(<intpair-getx> s, <intpair-gety>s)
   			else
   				addSize := IntPair("0", <intpair-getx> s)
   			end end end
   		else
   			if <eq>(rot, "0") then
   				addSize := IntPair("0", <intpair-gety> s)
   			else if <eq>(rot, "90") then
   				addSize := IntPair("0", "0")
   			else if <eq>(rot, "180") then
   				addSize := IntPair(<intpair-getx> s, "0")
   			else
   				addSize := IntPair(<intpair-gety> s, <intpair-getx> s)
   			end end end
   		end;
   		res := <intpair-add(|addSize)>intpair
